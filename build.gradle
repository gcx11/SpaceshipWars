buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.71'
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    mavenCentral()
}

def coroutines_version = '1.3.3'
def ktor_version = '1.3.2'
def logback_version = '1.2.3'
def kotlinx_io_version = '0.1.16'
def atomicfu_version = '0.14.1'
def logging_version = '1.7.8'

kotlin {
    jvm()
    js {
        browser {
            // https://kotlinlang.org/docs/reference/javascript-dce.html#known-issue-dce-and-ktor
            dceTask {
                keep("ktor-ktor-io.\$\$importsForInline\$\$.ktor-ktor-io.io.ktor.utils.io")
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io:$kotlinx_io_version"
                implementation "org.jetbrains.kotlinx:atomicfu-common:$atomicfu_version"
                implementation "io.github.microutils:kotlin-logging-common:$logging_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-html-builder:$ktor_version"
                implementation "io.ktor:ktor-websockets:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinx_io_version"
                implementation "io.github.microutils:kotlin-logging:$logging_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "io.ktor:ktor-client-js:$ktor_version"
                implementation "io.ktor:ktor-client-websockets:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
                implementation(npm("abort-controller", "3.0.0"))
                implementation(npm("text-encoding", "0.7.0")) // workaround for https://github.com/Kotlin/kotlinx-io/issues/57
                implementation "org.jetbrains.kotlinx:kotlinx-io-js:$kotlinx_io_version"
                implementation "io.github.microutils:kotlin-logging-js:$logging_version"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.RequiresOptIn')
                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes')
                useExperimentalAnnotation('io.ktor.util.KtorExperimentalAPI')
            }
        }
    }
}

task jvmDevelopmentProcessResources(dependsOn: jsBrowserDevelopmentWebpack) {
    jvmProcessResources.mustRunAfter jvmDevelopmentProcessResources
    jvmProcessResources.from(new File(jsBrowserDevelopmentWebpack.entry.name, jsBrowserDevelopmentWebpack.outputPath))
}

task jvmProductionProcessResources(dependsOn: jsBrowserProductionWebpack) {
    jvmProcessResources.mustRunAfter jvmProductionProcessResources
    jvmProcessResources.from(new File(jsBrowserProductionWebpack.entry.name, jsBrowserProductionWebpack.outputPath))
}

task runDev(type: JavaExec, dependsOn: [jvmJar, jvmDevelopmentProcessResources]) {
    group = "application"
    main = "me.gcx11.spaceshipwars.ServerKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
}

task runProd(type: JavaExec, dependsOn: [jvmJar, jvmProductionProcessResources]) {
    group = "application"
    main = "me.gcx11.spaceshipwars.ServerKt"
    classpath(configurations.jvmRuntimeClasspath, jvmJar)
    args = []
}